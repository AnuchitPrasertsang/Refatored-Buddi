# Bundles Buddi for distribution.  Yes, I know I should include this
#  in the ant script, but I am a) too lazy and b) using some stuff that I don't
#  know how to do from the ant script (such as FTP uploads).
#
# This script is meant to run on OS X, although it should be able to be
#  modified quite easily to run on Linux.  Windows is right out, unless
#  you use Cygwin.
#
# You need to actually create the Buddi.jar file first.  I use the FatJar
#  plugin for Eclipse, via my ant job, to do this, and it works quite well.
#
# You will need to install ant (for the compilation and FatJar'ing); and
#  launch4j (referenced from this script) to create the .exe.  If you don't care
#  about this, you can just use the FatJar Eclipse plugin for making
#  the jar, and this script to package it.
#
# See the bottom of this script for the actual program; everything else
#  are just functions, which are called from the bottom.
#
############################

function init {
	BUDDI_HOME=/Users/wyatt/Documents/Programming/Workplace/Buddi
	FATJAR_PATH=/Applications/Eclipse/plugins/net.sf.fjep.fatjar_0.1.0/fatjar.jar
	export BUDDI_HOME
	export FATJAR_PATH

	DEST=/Users/wyatt/Desktop/Buddi
	DEBIANROOT=$DEST/Debian
	DEBIAN=$DEBIANROOT/Buddi
	OSXROOT=$DEST/Buddi_OSX
	OSX=$OSXROOT/Buddi
	GENERICROOT=$DEST/Generic
	GENERIC=$GENERICROOT/Buddi
	WINDOWSROOT=$DEST/Windows
	WINDOWS=$WINDOWSROOT/Buddi
	SOURCE=source
	VERSION=`grep 'String VERSION = ' src/org/homeunix/drummer/Const.java | cut -f 7 -d ' ' | sed -e 's/";//' | sed -e 's/"//'`

	# Ensure that the changelog is updated, if this is a public release.
	if [ "$1" == "--release" ]; then
		grep -q "^$VERSION (" Documents/Changelog.txt
		if [ "$?" != 0 ]; then
			echo "Changelog not updated.  Exiting."
			exit 1
		fi
	fi
	
	rm -rf $DEST
	mkdir -p $DEST
	svn export . $DEST/$SOURCE
}



# Do the compilation and jar'ing.  You can avoid running this function
# if you do it yourself.
function make_jar {
	ant
#	ant jar
#
#	# Run the retroweaver methods to make old jars...
#	java -cp ../ant_tasks/retroweaver/lib/asm-commons-3.0_RC1.jar:../ant_tasks/retroweaver/lib/asm-3.0_RC1.jar:../ant_tasks/retroweaver/lib/asm-util-3.0_RC1.jar:../ant_tasks/retroweaver/release/retroweaver-2.0Beta1.jar net.sourceforge.retroweaver.Weaver -jar Buddi-base.jar Buddi-base-1.4.jar
#	java -cp ../ant_tasks/retroweaver/lib/asm-commons-3.0_RC1.jar:../ant_tasks/retroweaver/lib/asm-3.0_RC1.jar:../ant_tasks/retroweaver/lib/asm-util-3.0_RC1.jar:../ant_tasks/retroweaver/release/retroweaver-2.0Beta1.jar net.sourceforge.retroweaver.Weaver -jar lib/Moss.jar lib/Moss-1.4.jar
#
#	# This runs both fatjar and fatjar-1.4
#	ant fatjar
}





#Create the platform independent directory
function bundle_generic {
	mkdir -p $GENERIC
	cp Buddi.jar $GENERIC
#	cp -R $DEST/$SOURCE/Documents $GENERIC
#	cp -R $DEST/$SOURCE/Licenses $GENERIC

	tar -C $GENERICROOT -czf $DEST/Buddi-$VERSION.tgz Buddi
}



function bundle_debian {

	# Makes the Debian package.  Thanks to Leif Ryge at 
	# http://synthesize.us/HOWTO_make_a_deb_archive_without_dpkg for 
	# instructions on how to do this without dpkg.

	mkdir -p $DEBIAN/usr/bin
	cp Buddi.jar $DEBIAN/usr/bin
	cp etc/buddi $DEBIAN/usr/bin
	mkdir -p $DEBIAN/usr/share/applications
	cp etc/buddi.desktop $DEBIAN/usr/share/applications/buddi.desktop
	for X in 16 22 24 32 36 48 64 72 96 128 192; do
		mkdir -p $DEBIAN/usr/share/icons/hicolor/${X}x${X}/apps/
		cp img/buddi-${X}x${X}.png $DEBIAN/usr/share/icons/hicolor/${X}x${X}/apps/buddi.png
	done
	mkdir -p $DEBIAN/usr/share/pixmaps/
	cp img/buddi-48x48.png $DEBIAN/usr/share/pixmaps/buddi.png
	mkdir -p $DEBIAN/usr/share/doc/buddi
	cp etc/debian_README $DEBIAN/usr/share/doc/buddi/README
	cp etc/debian_control $DEBIAN/control
	cp etc/debian_preinst $DEBIAN/preinst
	cp etc/debian_postrm $DEBIAN/postrm

	# Setting this environment variable fixes Apple's modified GNU tar so 
	# that it won't make dot-underscore AppleDouble files. Google it 
	# for details...
	export COPY_EXTENDED_ATTRIBUTES_DISABLE=1

	# Save current directory
	CURRDIR=`pwd`

	cd ${DEBIAN}

	# Update control file with version and size information
	SIZE=`du -ks usr|cut -f 1`
	sed -i .bak  -e "s/BUDDI_VERSION/$VERSION/" $DEBIAN/control
	sed -i .bak  -e "s/BUDDI_SIZE/$SIZE/" $DEBIAN/control

	# create the data tarball
	# (the tar options "czvf" mean create, zip, verbose, and filename.)
	tar czvf data.tar.gz usr/ 

	# create the control tarball
	tar czvf control.tar.gz control preinst postrm

	# create the debian-binary file
	echo 2.0 > debian-binary

	# create the ar (deb) archive
	ar -r buddi.deb debian-binary control.tar.gz data.tar.gz

	# move the new deb up a directory
	mv buddi.deb ${DEST}/buddi-${VERSION}.deb

	# remove the tarballs, and cd back up to where we started
	rm data.tar.gz control.tar.gz
	
	cd ${CURRDIR}


	if [ "$1" == "--release" ]; then
		# Make the Packages file for releases

		SIZE_BYTES=`ls -l ${DEST}/buddi-${VERSION}.deb | cut -f 9 -d ' '`
		MD5SUM=`md5 ${DEST}/buddi-${VERSION}.deb | cut -f 4 -d ' '`

		# Copy the tempplate Packages file to working dir for modifications
		cp etc/debian_Packages Packages
		sed -i .bak  -e "s/BUDDI_VERSION/${VERSION}/" Packages
		sed -i .bak  -e "s/BUDDI_SIZE/${SIZE}/" Packages
		sed -i .bak  -e "s/BYTES/${SIZE_BYTES}/" Packages
		sed -i .bak  -e "s/BUDDI_MD5SUM/${MD5SUM}/" Packages

		# Remove backup Packages file
		rm Packages.bak
	fi
}




#Create the OSX directory
function bundle_osx {
	mkdir -p $OSXROOT
	mkdir -p $OSX/Buddi.app/Contents/Resources/Java/Languages
	mkdir -p $OSX/Buddi.app/Contents/MacOS

	# Needed to make this a real Mac .app bundle
	cp etc/JavaApplicationStub $OSX/Buddi.app/Contents/MacOS

	# Copy the .plist and .icns files
	cp etc/Info.plist $OSX/Buddi.app/Contents/
	cp img/Buddi.icns $OSX/Buddi.app/Contents/Resources/

	# Copy Buddi and associated files
	cp Buddi.jar $OSX/Buddi.app/Contents/Resources/Java/
	cp lib/libquaqua.jnilib $OSX/Buddi.app/Contents/Resources/Java/
	cp lib/quaqua*.jar $OSX/Buddi.app/Contents/Resources/Java/Quaqua.jar

	# Copy text files
#	cp -R $DEST/$SOURCE/Documents $OSX
#	cp -R $DEST/$SOURCE/Licenses $OSX

	if [ "$VERSION" != "" ]; then
		# Archive the bundles
		sed -i .bak  -e "s/BUDDI_VERSION/$VERSION/" $OSX/Buddi.app/Contents/Info.plist
		rm $OSX/Buddi.app/Contents/Info.plist.bak
	fi

	hdiutil create -format UDZO -srcfolder $OSX -o $DEST/Buddi-${VERSION}.dmg
}



# Change the launch4j config file to use correct version
function bundle_windows {
	TEMP_LAUNCH=temp.xml
	cp etc/launch4j.xml $TEMP_LAUNCH
	if [ "$VERSION" != "" ]; then
		VERSION_NO_LETTERS=`echo $VERSION | sed -e "s/[a-z]//g"`
		sed -i .bak  -e "s/VERSION/${VERSION_NO_LETTERS}.0/" $TEMP_LAUNCH
		sed -i .bak  -e "s/VERSION_LONG/${VERSION_NO_LETTERS}.0/" $TEMP_LAUNCH
	fi

	CURRDIR=`pwd`

	# Make the .exe, with correct version as set in previous lines
	../build_tools/launch4j/launch4j $CURRDIR/$TEMP_LAUNCH
	rm $TEMP_LAUNCH*

	# Create the Windows bundle
	mkdir -p $WINDOWS
	cp Buddi.exe $WINDOWS
#	cp -R $DEST/$SOURCE/Documents $WINDOWS
#	cp -R $DEST/$SOURCE/Licenses $WINDOWS

	cd $WINDOWSROOT
	zip -r $DEST/Buddi-$VERSION.zip Buddi
	cd $CURRDIR
}




# Create the source bundle
function bundle_source {
	tar -C $DEST -czf $DEST/Buddi-$VERSION.src.tgz $SOURCE
}

# Creates the help bundle
function bundle_help {
	./bundleWeb --local
}

# Remove the bundle directories and build junk in project directory
function clean {
	rm -rf $DEST/$SOURCE
	rm -rf $WINDOWSROOT
	rm -rf $OSXROOT
	rm -rf $DEBIANROOT
	rm -rf $GENERICROOT
	
	rm Buddi.exe
	rm *.jar
}


# Upload the bundles
function upload {
	if [ "$1" == "--release" ]; then
		svn copy https://buddisvn.sourceforge.net/svnroot/buddi/trunk https://buddi.svn.sourceforge.net/svnroot/buddi/tags/$VERSION -m "Tagging release $VERSION"
		echo Package=${PACKAGE}

		#Upload Debian Packages.gz to root of Buddi SF.net page
		gzip Packages
		scp Packages.gz olsonw@shell.sf.net:/home/groups/b/bu/buddi/htdocs/
		rm Packages.gz

                # Depending on if this is a Stable or a Distribution release,
		# we need to upload to different locations.
		grep BRANCH src/org/homeunix/drummer/Const.java | grep -q UNSTABLE
		if [ "$?" == 0 ]; then
			ssh olsonw@shell.sf.net 'rm -rf /home/groups/b/bu/buddi/htdocs/debian/dists/development; for X in all i386 amd64 powerpc sparc; do mkdir -p /home/groups/b/bu/buddi/htdocs/debian/dists/development/main/binary-${X}; cp /home/groups/b/bu/buddi/htdocs/Packages.gz /home/groups/b/bu/buddi/htdocs/debian/dists/development/main/binary-${X}; done; rm /home/groups/b/bu/buddi/htdocs/Packages.gz'
		else
			ssh olsonw@shell.sf.net 'rm -rf /home/groups/b/bu/buddi/htdocs/debian/dists/stable; for X in all i386 amd64 powerpc sparc; do mkdir -p /home/groups/b/bu/buddi/htdocs/debian/dists/stable/main/binary-${X}; cp /home/groups/b/bu/buddi/htdocs/Packages.gz /home/groups/b/bu/buddi/htdocs/debian/dists/stable/main/binary-${X}; done; rm /home/groups/b/bu/buddi/htdocs/Packages.gz'
		fi


		# Upload release files
		USER=anonymous
		PASS=pass
		ftp -n upload.sf.net << END_OF_FTP
user $USER $PASS
cd /incoming
lcd $DEST
bin
put Buddi-$VERSION.zip
put Buddi-$VERSION.tgz
put Buddi-$VERSION.dmg
put Buddi-$VERSION.deb
put Buddi-$VERSION.src.tgz
bye
END_OF_FTP
		echo Upload Complete
	fi
}





init $*
make_jar $*
#bundle_help $*
bundle_debian $*
bundle_windows $*
bundle_osx $*
bundle_generic $*
bundle_source $*
clean $*
upload $*

