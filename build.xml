<?xml version="1.0"?>
<project name="ImageTagger" default="all" basedir=".">

	<!-- Set up all the machine dependent properties in this file.  A sample should be provided 
		 in the project, called ant.properties.sample.  -->
	<property file="ant.properties"/>
	<!-- Grab the version number.  This file should consist of a single line, 
		 containing the string "VALUE=x.y.r.b" where "x.y.r.b" is the version number.
		 You must include all four digits, even if they are zero. -->
	<property file="${PROJECT_HOME}/version.txt"/>

	<!-- Set up all the project specific properties -->
	<property name="PROJECT_NAME" value="Buddi"/>
	<property name="PROJECT_UNIX_NAME" value="buddi"/>
	<property name="BUILD_NAME" value="Buddi"/>
	<property name="PROJECT_DESCRIPTION" value="Buddi (Personal Budget Software)"/>
	<property name="PROJECT_CLASS" value="org.homeunix.thecave.buddi.Buddi"/>
	<property name="PROJECT_COPYRIGHT" value="Copyright Wyatt Olson"/>

	<!-- Build the program for all platforms -->
	<target name="all" depends="windows,osx,unix,debian,redhat,source,generic" description="Builds packages for all available platforms."/>

	<target name="windows" depends="jar" description="Builds .exe for Windows, using Launch4J">
		<!-- Define the tasks for Launch4J and AntInstaller -->
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${LAUNCH4J_PATH}/launch4j.jar:${LAUNCH4J_PATH}/lib/xstream.jar" />

		<taskdef name="installer" classname="org.tp23.antinstaller.taskdefs.Installer" classpath="${ANTINSTALLER_PATH}/lib/ant-installer.jar:${ANTINSTALLER_PATH}/lib/ant-installer-ext.jar"/>
		<!-- Make the base .exe -->
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${PROJECT_HOME}/build/${PROJECT_NAME}.jar" 
				outfile="${PROJECT_HOME}/build/${PROJECT_NAME}.exe" 
				errTitle="${PROJECT_NAME}"
				chdir="."
				stayAlive="true"
				icon="${PROJECT_HOME}/img/win/${PROJECT_UNIX_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${PROJECT_DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="Wyatt Olson"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${PROJECT_NAME}"
			    	companyName="Wyatt Olson"
			    	internalName="${PROJECT_NAME}"
			    	originalFilename="${BUILD_NAME}.exe"/>
			</config>
		</launch4j>

		<mkdir dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>
		<move file="${PROJECT_HOME}/build/${PROJECT_NAME}.exe" tofile="${PROJECT_HOME}/build/${BUILD_NAME}/${BUILD_NAME}.exe"/>
		<copy todir="${PROJECT_HOME}/build/${BUILD_NAME}">
			<fileset dir="${PROJECT_HOME}/img/win">
				<exclude name="${PROJECT_UNIX_NAME}.ico"/>
				<include name="*.ico"/>
			</fileset>
			<fileset dir="${PROJECT_HOME}/doc">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>		

		<mkdir dir="${PROJECT_HOME}/build"/>
		<zip destfile="${PROJECT_HOME}/build/package.zip">
			<zipfileset dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>
		</zip>
		
		<!-- Make installer -->
		<copy file="${PROJECT_HOME}/etc/windows/moss-installer.jar" tofile="${PROJECT_HOME}/build/installer.jar"/>
		<jar destfile="${PROJECT_HOME}/build/installer.jar" update="true">
			<zipfileset file="${PROJECT_HOME}/build/package.zip" prefix="install"/>
			<zipfileset file="${PROJECT_HOME}/etc/windows/MossInstaller.properties"/>
			<zipfileset file="${PROJECT_HOME}/etc/windows/postinstall.js"/>			
			<zipfileset dir="${PROJECT_HOME}/img">
				<include name="BuddiAboutLogo.png"/>
				<include name="BuddiFrameIcon.gif"/>
			</zipfileset>
		</jar>
		
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${PROJECT_HOME}/build/installer.jar" 
				outfile="${PROJECT_HOME}/build/${PROJECT_NAME}-Installer.exe" 
				errTitle="${PROJECT_NAME}"
				chdir="."
				stayAlive="true"
				icon="${PROJECT_HOME}/img/win/${PROJECT_UNIX_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${PROJECT_DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="Wyatt Olson"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${PROJECT_NAME}"
			    	companyName="Wyatt Olson"
			    	internalName="${PROJECT_NAME}"
			    	originalFilename="${BUILD_NAME}-${VERSION}.exe"/>
			</config>
		</launch4j>
		
		<move file="${PROJECT_HOME}/build/${PROJECT_NAME}-Installer.exe" tofile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.exe"/>

		<delete dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>
		<delete>
			<fileset dir="${PROJECT_HOME}/build/">
				<include name="installer.jar"/>
				<include name="package.zip"/>
				<include name="${BUILD_NAME}"/>
			</fileset>
		</delete>
	</target>

	<target name="osx" depends="jar" description="Builds an OSX package, using JarBundler.  If on a Mac, will also wrap this in a .dmg; otherwise, will wrap in .zip">
		<!-- Define the JarBundler path -->
		<taskdef name="jarbundler" classpath="${JARBUNDLER_JAR}" classname="net.sourceforge.jarbundler.JarBundler"/>

		<mkdir dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>
		<jarbundler dir="${PROJECT_HOME}/build/${BUILD_NAME}" verbose="true" showPlist="false"
	        name="${BUILD_NAME}"
	        shortname="${PROJECT_NAME}"
	        signature="????"
	        stubfile="${PROJECT_HOME}/etc/osx/JavaApplicationStub"
	        mainclass="${PROJECT_CLASS}"
	        icon="${PROJECT_HOME}/img/osx/${PROJECT_NAME}.icns"
	        jvmversion="1.5+"
	        version="${VERSION}"
	        infostring="${PROJECT_NAME}, ${PROJECT_COPYRIGHT}"
	        bundleid="${PROJECT_CLASS}">

			<jarfileset file="${PROJECT_HOME}/build/${PROJECT_NAME}.jar" />
			<jarfileset dir="${PROJECT_HOME}/lib">
				<include name="*quaqua*"/>
			</jarfileset>

			<!-- Associate document types with this application -->
			<documenttype name="Buddi Data"
				extensions="buddi3"
				iconFile="${PROJECT_HOME}/img/osx/BuddiData.icns"
				role="Editor"/>
				                
			<documenttype name="Buddi Plugin"
				extensions="buddi3plugin" 
				iconFile="${PROJECT_HOME}/img/osx/BuddiPlugin.icns"
				role="Editor"/>
			
			<documenttype name="Buddi Translation"
				extensions="lang" 
				iconFile="${PROJECT_HOME}/img/osx/BuddiLanguage.icns"
				role="Editor"/>

		</jarbundler>

		<!-- Copy documentation -->
		<copy todir="${PROJECT_HOME}/build/${BUILD_NAME}">
			<fileset dir="${PROJECT_HOME}/doc">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>
		
		<exec executable="/usr/bin/hdiutil" os="Mac OS X">
			<arg line="create -format UDZO -srcfolder '${PROJECT_HOME}/build/${BUILD_NAME}' -o '${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.dmg'"/>
		</exec>

		<condition property="OS_IS_MAC">
			<os name="Mac OS X"/>
		</condition>

		<property name="BUILD_OSX_PACKAGE" value="true"/>

		<ant target="osx_zip"/>

		<delete dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>

	</target>

	<target name="osx_zip"  
			if="BUILD_OSX_PACKAGE"
			unless="OS_IS_MAC"
			description="Bundles the Macintosh .app package ina .zip, in case you are not building from a Mac.">
		<zip destfile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}-Macintosh.zip">
			<fileset dir="${PROJECT_HOME}/build/${BUILD_NAME}"/>
		</zip>
	</target>

	<!-- The Unix task will tar the .jar along with a launcher.  The user is responsible for putting
		 this in the correct location, and modifying the launcher as needed. -->
	<target name="unix" depends="jar" description="Creates a generic Unix package, with a command line capable launcher.">
		
		<copy todir="${PROJECT_HOME}/build">
			<fileset dir="${PROJECT_HOME}/etc/unix/usr/bin"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="unix"/>
			</filterset>
		</copy>
		
		<tar destfile="${PROJECT_HOME}/build/${PROJECT_NAME}.tar" >
			<tarfileset dir="${PROJECT_HOME}/build" mode="755" prefix="${BUILD_NAME}">
				<include name="${PROJECT_UNIX_NAME}"/>
			</tarfileset>
			<tarfileset dir="${PROJECT_HOME}/build" prefix="${BUILD_NAME}">
				<include name="${PROJECT_NAME}.jar"/>
			</tarfileset>

			<!-- Copy documentation -->
			<tarfileset dir="${PROJECT_HOME}/etc/unix" prefix="${BUILD_NAME}">
				<include name="Readme.unix"/>
			</tarfileset>
			<tarfileset dir="${PROJECT_HOME}/doc" prefix="${BUILD_NAME}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.tgz" src="${PROJECT_HOME}/build/${PROJECT_NAME}.tar"/>
		<delete>
			<fileset dir="${PROJECT_HOME}/build">
				<include name="${PROJECT_NAME}.tar"/>
				<include name="${PROJECT_UNIX_NAME}"/>
			</fileset>
		</delete>
	</target>


	<!-- The Debian task. -->
	<target name="debian" depends="jar" description="Creates a Debian .deb file, with entries for FreeDesktop desktops.">
		<taskdef name="deb" classpath="${JDEB_JAR}" classname="org.vafer.jdeb.ant.DebAntTask"/>

		<mkdir dir="${PROJECT_HOME}/build/deb/data"/>
		
		<!-- Copy all supporting files, for free desktop, scripts, etc -->
		<copy todir="${PROJECT_HOME}/build/deb/data/usr">
			<fileset dir="${PROJECT_HOME}/etc/unix/usr"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="debian"/>
			</filterset>
		</copy>
		
		<!-- Copy documentation -->
		<mkdir dir="${PROJECT_HOME}/build/deb/data/usr/share/doc"/>
		<copy todir="${PROJECT_HOME}/build/deb/data/usr/share/doc">
			<fileset dir="${PROJECT_HOME}/doc">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>	

		<!-- Copy fat jar file -->
		<copy file="${PROJECT_HOME}/build/${PROJECT_NAME}.jar" todir="${PROJECT_HOME}/build/deb/data/usr/bin"/>

		<!-- Create Debian control files -->
		<mkdir dir="${PROJECT_HOME}/build/deb/control"/>
		<copy todir="${PROJECT_HOME}/build/deb/control">
			<fileset dir="${PROJECT_HOME}/etc/unix/linux/debian/control"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${VERSION}"/>
			</filterset>
		</copy>

		<!-- Create the .deb file -->
		<deb destfile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.deb" control="${PROJECT_HOME}/build/deb/control">
			<data src="${PROJECT_HOME}/build/deb/data">
				<exclude name="**/.svn"/>
			</data>
		</deb>

		<delete includeemptydirs="true" dir="${PROJECT_HOME}/build/deb"/>
	</target>

	<target name="redhat" depends="jar">

	</target>

	<target name="source" depends="clean" description="Exports the source and tars the bundle">
		<!-- Define the JarBundler path -->
		<path id="SVNANT_CLASSPATH">
			<fileset dir="${SVNANT_PATH}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		<taskdef name="svn" classpathref="SVNANT_CLASSPATH" classname="org.tigris.subversion.svnant.SvnTask"/>

		<svn>
			<export srcPath="${PROJECT_HOME}" destPath="${PROJECT_HOME}/build/src"/>
		</svn>

		<tar destfile="${PROJECT_HOME}/build/${PROJECT_NAME}.src.tar">
			<tarfileset dir="${PROJECT_HOME}/build/src">
				<include name="**/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.src.tgz" src="${PROJECT_HOME}/build/${PROJECT_NAME}.src.tar"/>
		<delete includeemptydirs="true">
			<fileset dir="${PROJECT_HOME}/build">
				<include name="${PROJECT_NAME}.src.tar"/>
			</fileset>
			<fileset dir="${PROJECT_HOME}/build/src"/>
		</delete>
	</target>

	<target name="generic" depends="jar" description="Renames the fat jar to the release name (including version number)">
		<move file="${PROJECT_HOME}/build/${PROJECT_NAME}.jar" tofile="${PROJECT_HOME}/build/${BUILD_NAME}-${VERSION}.jar"/>
	</target>

	<target name="javadocs" depends="clean" description="Creates the javadocs">
		<mkdir dir="${PROJECT_HOME}/javadocs"/>
		<javadoc destdir="${PROJECT_HOME}/javadocs" packagenames="org">
			<packageset dir="${PROJECT_HOME}/src">
				<include name="**/*"/>
			</packageset>
			<!-- Include Moss in Javadocs.  Change this location or remove it as needed. -->
			<packageset dir="${PROJECT_HOME}/../Moss/src">
				<include name="**/*"/>
			</packageset>
		</javadoc>
	</target>

	<target name="release" depends="all,javadocs" description="Uploads the project, javadocs, etc to correct servers.  Only the project admin should use this.">
		<tar destfile="${PROJECT_HOME}/javadocs/javadocs.tar">
			<tarfileset dir="${PROJECT_HOME}/javadocs">
			    <exclude name="javadocs.tar"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${PROJECT_HOME}/javadocs/javadocs.tgz" src="${PROJECT_HOME}/javadocs/javadocs.tar"/>

		<!-- Remove existing javadocs on server -->
		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="rm -rf ${WEB_ROOT}/javadocs/*"/>

		<!-- Upload new javadocs -->
		<scp todir="${WEB_USER}@${WEB_HOST}:${WEB_ROOT}/javadocs"
			file="${PROJECT_HOME}/javadocs/javadocs.tgz"
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"/>
		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="tar -C ${WEB_ROOT}/javadocs -zxvf ${WEB_ROOT}/javadocs/javadocs.tgz"/>
		
		<!-- Upload to SF.net -->
		<ftp server="upload.sf.net" 
				userid="anonymous"
				password="password" 
				remotedir="/incoming"
				action="put">
			<fileset dir="${PROJECT_HOME}/build"/>
		</ftp>
	</target>

	<target name="jar" depends="clean,compile" description="Creatse a single 'fat' jar, containing all required libraries.">
		<mkdir dir="${PROJECT_HOME}/build/tmp"/>
		<jar destfile="${PROJECT_HOME}/build/tmp/${PROJECT_NAME}.jar">
			<fileset dir="${PROJECT_HOME}/bin" includes="**/*"/>
			<fileset dir="${PROJECT_HOME}">
				<include name="Languages/*"/>
				<include name="version.txt"/>
				<include name="img/BuddiAboutLogo.png"/>
				<include name="img/BuddiFrameIcon.gif"/>
			</fileset>
		</jar>

		<!-- Define the tasks and associated classes for FatJar -->
		<taskdef name="fatjar.build" classname="net.sf.fjep.anttask.FJBuildTask" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.manifest" classname="net.sf.fjep.anttask.FJManifestType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.exclude" classname="net.sf.fjep.anttask.FJExcludeType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.jarsource" classname="net.sf.fjep.anttask.FJJarSourceType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.filesource" classname="net.sf.fjep.anttask.FJFileSourceType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.autojar" classname="net.sf.fjep.anttask.FJAutoJarType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>
		<typedef name="fatjar.class" classname="net.sf.fjep.anttask.FJClassType" classpath="${FATJAR_JAR}" loaderref="${FATJAR_JAR}"/>

		<fatjar.build output="${PROJECT_HOME}/build/${PROJECT_NAME}.jar">
			<fatjar.manifest mainclass="${PROJECT_CLASS}"/>

			<!-- This is the project jar file, just compiled below -->
			<fatjar.jarsource file="${PROJECT_HOME}/build/tmp/${PROJECT_NAME}.jar" relpath=""/>

			<!-- These are all the included files which normally would go on the classpath -->
			<fatjar.jarsource file="${PROJECT_HOME}/lib/BrowserLauncher2-1_3.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/jcommon-1.0.10.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/jfreechart-1.0.6.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/moss.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/swingx-2007_08_12.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/SwingWorker.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/emf.ecore_2.2.2.v200702010000.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/emf.ecore.xmi_2.2.2.v200702010000.jar" relpath=""/>
			<fatjar.jarsource file="${PROJECT_HOME}/lib/emf.common_2.2.1.v200702010000.jar" relpath=""/>

		</fatjar.build>

		<delete includeemptydirs="true">
			<fileset dir="${PROJECT_HOME}/build/" includes="**/*" excludes="${PROJECT_NAME}.jar" />
		</delete>
	</target>

	<target name="compile" description="Builds the project">
		<javac srcdir="src" destdir="bin"/>
	</target>

	<target name="clean" description="Removes all files from build and javadocs directories">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${PROJECT_HOME}/build">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${PROJECT_HOME}/javadocs">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>
</project>
