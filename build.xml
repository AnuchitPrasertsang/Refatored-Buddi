<?xml version="1.0"?>
<project name="Buddi" default="jar" basedir=".">

	<property name="FULL_NAME" value="Buddi" 
		description="The full project name.  This can include any character which is valid on the filesystem."/>
	<property name="SAFE_NAME" value="Buddi" 
		description="The safe project name.  This must only include alphabetic characters, numbers, period, dash, and underscore."/>
	<property name="UNIX_NAME" value="buddi" 
		description="The unix project name.  This must only include lower case characters, numbers, period, dash, and underscore."/>
	<property name="DESCRIPTION" value="Buddi (Personal Budget Software)" 
		description="The project description.  This is used on the Start menu in Windows, among other places."/>
	<property name="MAIN_CLASS" value="org.homeunix.thecave.buddi.Buddi" 
		description="The package and class name of the .class file which contains the main method."/>
	<property name="COPYRIGHT_HOLDER" value="Wyatt Olson" 
		description="The copyright holder."/>
	<property name="COPYRIGHT" value="Copyright ${COPYRIGHT_HOLDER}" 
		description="The copyright message"/>
	<property name="SVN_ROOT" value="https://buddi.svn.sourceforge.net/svnroot/buddi" 
		description="The path to the head of the SVN repository.  The folders trunk, tags, and branches must be immediately below this location."/>
	
	<property name="ROOT" value="."/>
	<property name="BIN" value="${ROOT}/bin"/>
	<property name="BUILD" value="${ROOT}/build"/>
	<property name="DOCS" value="${ROOT}/docs"/>
	<property name="ETC" value="${ROOT}/etc"/>
	<property name="IMG" value="${ROOT}/img"/>
	<property name="JAVADOCS" value="${ROOT}/javadocs"/>
	<property name="LIB" value="${ROOT}/lib"/>
	<property name="SRC" value="${ROOT}/src"/>

	<property file="${ROOT}/version.txt"/>
	<property file="${ETC}/ant.properties"/>

	<target name="all" depends="windows,osx,unix,slackware,debian,redhat,source,generic" description="Builds packages for all available platforms."/>

	<target name="windows" depends="jar" description="Builds .exe for Windows, using Launch4J">
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${LAUNCH4J_PATH}/launch4j.jar:${LAUNCH4J_PATH}/lib/xstream.jar" />
		
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${BUILD}/${FULL_NAME}.jar" 
				outfile="${BUILD}/${FULL_NAME}.exe" 
				errTitle="${FULL_NAME}"
				chdir="."
				stayAlive="true"
				icon="${IMG}/windows/${SAFE_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="${COPYRIGHT}"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${FULL_NAME}"
			    	companyName="${COPYRIGHT_HOLDER}"
			    	internalName="${FULL_NAME}"
			    	originalFilename="${FULL_NAME}.exe"/>
			</config>
		</launch4j>

		<mkdir dir="${BUILD}/${FULL_NAME}"/>
		<move file="${BUILD}/${FULL_NAME}.exe" tofile="${BUILD}/${FULL_NAME}/${FULL_NAME}.exe"/>
		<copy todir="${BUILD}/${FULL_NAME}">
			<fileset dir="${IMG}/windows">
				<exclude name="${UNIX_NAME}.ico"/>
				<include name="*.ico"/>
			</fileset>
			<fileset dir="${ROOT}/docs">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>		

		<mkdir dir="${BUILD}"/>
		<zip destfile="${BUILD}/package.zip">
			<zipfileset dir="${BUILD}/${FULL_NAME}"/>
		</zip>
		
		<copy file="${BUILD}/${FULL_NAME}/${FULL_NAME}.exe" tofile="${BUILD}/${SAFE_NAME}-${VERSION}.exe" />
		
		<copy file="${ETC}/windows/moss-installer.jar" tofile="${BUILD}/installer.jar"/>
		<jar destfile="${BUILD}/installer.jar" update="true">
			<zipfileset file="${BUILD}/package.zip" prefix="install"/>
			<zipfileset file="${ETC}/windows/MossInstaller.properties"/>
			<zipfileset file="${ETC}/windows/postinstall.js"/>			
			<zipfileset dir="${IMG}">
				<include name="*.png"/>
				<include name="*.jpg"/>
				<include name="*.gif"/>
			</zipfileset>
		</jar>
		
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${BUILD}/installer.jar" 
				outfile="${BUILD}/${SAFE_NAME}-${VERSION}-Installer.exe" 
				errTitle="${FULL_NAME}"
				chdir="."
				stayAlive="true"
				icon="${IMG}/windows/${SAFE_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="${COPYRIGHT}"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${FULL_NAME}"
			    	companyName="${COPYRIGHT_HOLDER}"
			    	internalName="${FULL_NAME}"
			    	originalFilename="${FULL_NAME}-${VERSION}.exe"/>
			</config>
		</launch4j>

		<delete dir="${BUILD}/${FULL_NAME}"/>
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}">
				<include name="installer.jar"/>
				<include name="package.zip"/>
				<include name="${FULL_NAME}"/>
			</fileset>
		</delete>
	</target>

	<target name="osx" depends="jar" description="Builds an OSX package, using JarBundler.  If on a Mac, will also wrap this in a .dmg; otherwise, will wrap in .zip">
		<taskdef name="jarbundler" classpath="${JARBUNDLER_JAR}" classname="net.sourceforge.jarbundler.JarBundler"/>

		<mkdir dir="${BUILD}/${FULL_NAME}"/>
		<jarbundler dir="${BUILD}/${FULL_NAME}" verbose="true" showPlist="false"
	        name="${FULL_NAME}"
	        shortname="${FULL_NAME}"
	        signature="????"
	        stubfile="${ETC}/osx/JavaApplicationStub"
	        mainclass="${MAIN_CLASS}"
	        icon="${IMG}/osx/${FULL_NAME}.icns"
	        jvmversion="1.5+"
	        version="${VERSION}"
	        infostring="${FULL_NAME}, ${PROJECT_COPYRIGHT}"
	        bundleid="${MAIN_CLASS}">

			<jarfileset file="${BUILD}/${FULL_NAME}.jar" />
			<jarfileset dir="${LIB}">
				<include name="*quaqua*"/>
			</jarfileset>

			<!-- Associate document types with this application.  
			     Unfortunately, I can't figure out a way to 
			     abstract this functionality into a configuration
			     file or the properties at the top of the build
			     script - if someone knows how to do this, so that
			     I can use a single build script for multiple 
			     applications and only change the properties, 
			     please let me know!
			-->
			<documenttype name="Buddi Data"
				extensions="buddi3"
				iconFile="${IMG}/osx/BuddiData.icns"
				role="Editor"/>
				                
			<documenttype name="Buddi Plugin"
				extensions="buddi3plugin" 
				iconFile="${IMG}/osx/BuddiPlugin.icns"
				role="Editor"/>
			
			<documenttype name="Buddi Translation"
				extensions="lang" 
				iconFile="${IMG}/osx/BuddiLanguage.icns"
				role="Editor"/>

		</jarbundler>

		<copy todir="${BUILD}/${FULL_NAME}">
			<fileset dir="${DOCS}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>
				
		<condition property="OS_IS_MAC">
			<os name="Mac OS X"/>
		</condition>

		<ant target="osx_zip"/>
		<ant target="osx_dmg"/>

		<delete dir="${BUILD}/${FULL_NAME}"/>

	</target>
	
	<target name="osx_dmg" if="OS_IS_MAC" description="Bundles the Macintosh .app package in a .zip.  Automatically called from target osx if you are building on a Mac.">
		<exec executable="/usr/bin/hdiutil" os="Mac OS X">
			<arg line="create -format UDZO -srcfolder '${BUILD}/${FULL_NAME}' -o '${BUILD}/${SAFE_NAME}-${VERSION}.dmg'"/>
		</exec>
	</target>

	<target name="osx_zip" unless="OS_IS_MAC" description="Bundles the Macintosh .app package in a .zip.  Automatically called from target osx if you are building on something other than a Mac.">
		<zip destfile="${BUILD}/${SAFE_NAME}-${VERSION}-OSX.zip">
			<fileset dir="${BUILD}/${FULL_NAME}"/>
		</zip>
	</target>
	
	<target name="slackware" depends="jar" description="Creates a Slackware package, with a command line capable launcher.">		
		<mkdir dir="${BUILD}/usr/bin"/>
		<mkdir dir="${BUILD}/usr/doc"/>
		<mkdir dir="${BUILD}/install"/>
		
		<copy todir="${BUILD}/usr/bin">
			<fileset dir="${ETC}/unix/usr/bin"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="slackware"/>
			</filterset>
		</copy>
		
		<copy todir="${BUILD}/usr/doc">
			<fileset dir="${DOCS}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>
		
		<copy todir="${BUILD}/install">
			<fileset dir="${ETC}/unix/linux/slackware/install" />
		</copy>
		
		<copy todir="${BUILD}/usr/bin">
			<fileset file="${BUILD}/${FULL_NAME}.jar"/>
		</copy>
		
		<tar destfile="${BUILD}/${FULL_NAME}.tar">
			<tarfileset dir="${BUILD}">
				<include name="usr/**"/>
				<include name="install/**"/>
			</tarfileset>
		</tar>
		
		<gzip zipfile="${BUILD}/${SAFE_NAME}-${VERSION}-Slackware.tgz" src="${BUILD}/${FULL_NAME}.tar"/>
		
		<delete dir="${BUILD}/usr"/>
		<delete dir="${BUILD}/install"/>
		<delete file="${BUILD}/${FULL_NAME}.tar"/>
	</target>

	<target name="unix" depends="jar" description="Creates a generic Unix package, with a command line capable launcher.">
		<copy todir="${BUILD}">
			<fileset dir="${ETC}/unix/usr/bin"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="unix"/>
			</filterset>
		</copy>
		
		<tar destfile="${BUILD}/${FULL_NAME}.tar" >
			<tarfileset dir="${BUILD}" mode="755" prefix="${FULL_NAME}">
				<include name="${UNIX_NAME}"/>
			</tarfileset>
			<tarfileset dir="${BUILD}" prefix="${FULL_NAME}">
				<include name="${FULL_NAME}.jar"/>
			</tarfileset>

			<!-- Copy documentation -->
			<tarfileset dir="${ETC}/unix" prefix="${FULL_NAME}">
				<include name="Readme.unix"/>
			</tarfileset>
			<tarfileset dir="${DOCS}" prefix="${FULL_NAME}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${BUILD}/${SAFE_NAME}-${VERSION}.tgz" src="${BUILD}/${FULL_NAME}.tar"/>
		<delete>
			<fileset dir="${BUILD}">
				<include name="${FULL_NAME}.tar"/>
				<include name="${UNIX_NAME}"/>
			</fileset>
		</delete>
	</target>


	<!-- The Debian task. -->
	<target name="debian" depends="jar" description="Creates a Debian .deb file, with entries for FreeDesktop desktops.">
		<taskdef name="deb" classpath="${JDEB_JAR}" classname="org.vafer.jdeb.ant.DebAntTask"/>

		<mkdir dir="${BUILD}/deb/data"/>
		
		<copy todir="${BUILD}/deb/data/usr">
			<fileset dir="${ETC}/unix/usr"/>
			<fileset dir="${IMG}/unix/usr"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="debian"/>
			</filterset>
		</copy>
		
		<mkdir dir="${BUILD}/deb/data/usr/share/doc"/>
		<copy todir="${BUILD}/deb/data/usr/share/doc">
			<fileset dir="${DOCS}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>	

		<copy file="${BUILD}/${FULL_NAME}.jar" todir="${BUILD}/deb/data/usr/bin"/>

		<mkdir dir="${BUILD}/deb/control"/>
		<copy todir="${BUILD}/deb/control">
			<fileset dir="${ETC}/unix/linux/debian/control"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${VERSION}"/>
			</filterset>
		</copy>

		<deb destfile="${BUILD}/${SAFE_NAME}-${VERSION}.deb" control="${BUILD}/deb/control">
			<data src="${BUILD}/deb/data">
				<exclude name="**/.svn"/>
			</data>
		</deb>

		<delete includeemptydirs="true" dir="${BUILD}/deb"/>
	</target>

	<target name="redhat" depends="jar">

	</target>

	<target name="source" depends="clean" description="Exports the source and tars the bundle.  Requires the SVN Ant path to be set up in the ant.properties file.">
		<path id="SVNANT_CLASSPATH">
			<fileset dir="${SVNANT_PATH}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		<taskdef name="svn" classpathref="SVNANT_CLASSPATH" classname="org.tigris.subversion.svnant.SvnTask"/>

		<svn>
			<export srcPath="${ROOT}" destPath="${BUILD}/src"/>
		</svn>

		<tar destfile="${BUILD}/${FULL_NAME}.src.tar">
			<tarfileset dir="${BUILD}/src">
				<include name="**/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${BUILD}/${SAFE_NAME}-${VERSION}.src.tgz" src="${BUILD}/${FULL_NAME}.src.tar"/>
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}">
				<include name="${FULL_NAME}.src.tar"/>
			</fileset>
			<fileset dir="${BUILD}/src"/>
		</delete>
	</target>

	<target name="generic" depends="jar" description="Renames the fat jar to the release name (including version number)">
		<move file="${BUILD}/${FULL_NAME}.jar" tofile="${BUILD}/${FULL_NAME}-${VERSION}.jar"/>
	</target>

	<target name="javadocs" depends="clean" description="Creates the javadocs">
		<mkdir dir="${JAVADOCS}"/>
		<javadoc destdir="${JAVADOCS}" packagenames="org">
			<packageset dir="${SRC}">
				<include name="**/*"/>
			</packageset>
			<packageset dir="${ROOT}/../Moss/src">
				<include name="**/*"/>
			</packageset>
		</javadoc>
	</target>

	<target name="release" depends="scp_javadocs,ftp" description="Uploads the project, javadocs, etc to correct servers.  Only the project admin should use this.">
		<svn>
			<copy srcUrl="${SVN_ROOT}/trunk" destUrl="${SVN_ROOT}/tags/${VERSION}" message="Tagging release ${VERSION}"/>
		</svn>				
	</target>

	<target name="scp_javadocs" depends="javadocs" description="Uploads Javadocs to web server, using SCP.  Uses SSHExec and SCP tasks, and thus requires jsch to be in the Ant classpath.">
		<tar destfile="${JAVADOCS}/javadocs.tar">
			<tarfileset dir="${JAVADOCS}">
			    <exclude name="javadocs.tar"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${JAVADOCS}/javadocs.tgz" src="${JAVADOCS}/javadocs.tar"/>

		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="rm -rf ${WEB_ROOT}/javadocs/*"/>

		<scp todir="${WEB_USER}@${WEB_HOST}:${WEB_ROOT}/javadocs"
			file="${JAVADOCS}/javadocs.tgz"
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"/>
		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="tar -C ${WEB_ROOT}/javadocs -zxvf ${WEB_ROOT}/javadocs/javadocs.tgz"/>
	</target>
	
	<target name="ftp" depends="all" description="Uploads all the build files to an FTP account">
		<ftp server="${FTP_HOST}" 
				userid="${FTP_USER}"
				password="${FTP_PASSWORD}" 
				remotedir="${FTP_DIRECTORY}"
				action="put">
			<fileset dir="${BUILD}"/>
		</ftp>		
	</target>
	
	<target name="jar" depends="clean,compile" description="Creatse a single 'fat' jar, containing all jars in the lib directory.">		
		<mkdir dir="${BUILD}/tmp"/>
		<unzip dest="${BUILD}/tmp">
			<fileset dir="${LIB}">
				<include name="*.jar"/>
				<exclude name="quaqua*"/>			
			</fileset>
		</unzip>
		
		<jar destfile="${BUILD}/${FULL_NAME}.jar">
			<manifest>
				<attribute name="Main-Class" value="${MAIN_CLASS}"/>
			</manifest>
			<fileset dir="${BUILD}/classes" includes="**/*"/>
			<fileset dir="${BUILD}/tmp" includes="**/*"/>
			<fileset dir="${ETC}">
				<include name="Languages/*"/>
			</fileset>
			<fileset dir="${ROOT}">
				<include name="version.txt"/>
				<include name="img/*.jpg"/>				
				<include name="img/*.png"/>
				<include name="img/*.gif"/>
				<include name="docs/**.rtf"/>
				<include name="docs/**.txt"/>
				<include name="docs/Licenses/**"/>
			</fileset>
		</jar>
		
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}/tmp"/>
			<fileset dir="${BUILD}/classes"/>
		</delete>
	</target>

	<target name="compile" description="Builds the project">
		<mkdir dir="${BUILD}/classes"/>
		<javac srcdir="${SRC}" destdir="${BUILD}/classes" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${LIB}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="clean" description="Removes all files from bin, build, and javadocs directories">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${BIN}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${BUILD}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${BUILD}/javadocs">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>
	
	<target name="init" description="Creates the directory layout for a new project.  Do not run in existing projects, or you may lose data.">
		<mkdir dir="${SRC}"/>
		<mkdir dir="${BIN}"/>

		<mkdir dir="${ETC}"/>
		<mkdir dir="${ETC}/Languages"/>
		<echo file="${ETC}/ant.properties.sample">
# Sample properties file for building the project.  Ensure you have all needed tools, and 
#  modify the paths as needed to reflect your project.
########################

#Web configuration for uploading to the web site
WEB_USER=web
WEB_HOST=www.example.com
WEB_ROOT=/var/www

#SSH Configuration
SSH_KEY=/home/user/.ssh/id_dsa
SSH_KEY_PASSPHRASE=password

#FTP Configuration
FTP_HOST=upload.sourceforge.net
FTP_USER=anonymous
FTP_PASSWORD=password
FTP_DIRECTORY=/incoming

#Launch4J (http://launch4j.sourceforge.net/) - Creates Windows .exe files as a wrapper for Java .jar
LAUNCH4J_PATH=/Users/Wyatt/Documents/Programming/Workplace/build_tools/launch4j
#SVN Ant (http://vafer.org/projects/jdeb) - Include SVN abilities in Ant
SVNANT_PATH=/Users/wyatt/Documents/Programming/Workplace/build_tools/svnant/lib

#JarBundler (http://fjep.sourceforge.net/) - Creates OS X application bundles
JARBUNDLER_JAR=/Users/Wyatt/Documents/Programming/Workplace/build_tools/jarbundler/jarbundler-1.9.jar
#JDeb (http://vafer.org/projects/jdeb) - Create Debian packages
JDEB_JAR=/Users/Wyatt/Documents/Programming/Workplace/build_tools/jdeb/jdeb-0.3.jar
		</echo>

		<mkdir dir="${ETC}/osx"/>
		<echo file="${ETC}/osx/TODO_JavaApplicationStub"/>
			
		<mkdir dir="${ETC}/windows"/>
		<echo file="${ETC}/windows/TODO_Moss-Installer.txt">You should copy the MossInstaller.jar file here, and create a postInstall.jar and MossInstaller.properties files here</echo>
		
		<mkdir dir="${ETC}/unix/linux/debian/control"/>
		<echo file="${ETC}/unix/linux/debian/control/TODO_control"/>
		<echo file="${ETC}/unix/linux/debian/control/TODO_postinst"/>
		<echo file="${ETC}/unix/linux/debian/control/TODO_postrm"/>
		<echo file="${ETC}/unix/linux/debian/control/TODO_preinst"/>
		
		<mkdir dir="${ETC}/unix/linux/slackware/install"/>
		<echo file="${ETC}/unix/linux/slackware/install/TODO_slack-desc"/>
		
		<mkdir dir="${ETC}/unix/usr/bin"/>
		<echo file="${ETC}/unix/usr/bin/TODO_${UNIX_NAME}"/>
		
		<mkdir dir="${LIB}"/>
		<echo file="${LIB}/Readme_Library.txt">All files of type .jar located in this directory will be extracted, and included in a 'fat jar' style compilation of the project.</echo>
		
		<mkdir dir="${IMG}"/>
		<echo file="${IMG}/Readme_Images.txt">All images of type .png, .gif, and .jpg included in the root of img/ will be included in the .jar file by default.</echo>
		<mkdir dir="${IMG}/osx"/>
		<echo file="${IMG}/osx/TODO_${FULL_NAME}.icns">You should create an icon set for your project</echo>
		<mkdir dir="${IMG}/windows"/>
		<echo file="${IMG}/windows/TODO_${SAFE_NAME}.ico">You should create an icon file for your project</echo>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/16x16/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/32x32/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/48x48/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/64x64/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/96x96/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/128x128/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/icons/hicolor/192x192/apps"/>
		<mkdir dir="${IMG}/unix/usr/share/pixmaps"/>
		<echo file="${IMG}/unix/usr/share/pixmaps/TODO_${UNIX_NAME}.png">You should create an image here of size 48x48, for use in the menu system.</echo>
		<echo file="${IMG}/unix/usr/share/icons/hicolor/TODO_${UNIX_NAME}.png">You should create an image here for each of the sizes listed below.</echo>
		
		<mkdir dir="${DOCS}"/>
		<echo file="${DOCS}/Readme.txt"/>
		<echo file="${DOCS}/Changelog.txt"/>
		
		<echo file="${ROOT}/${UNIX_NAME}.properties">VERSION=0.1.0.0</echo>
	</target>
</project>
