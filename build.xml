<?xml version="1.0"?>
<project name="Buddi" default="jar" basedir=".">

	<!-- Set up all the project specific properties -->	
	<property name="ROOT" value="."/>
	<property name="BIN" value="${ROOT}/bin"/>
	<property name="BUILD" value="${ROOT}/build"/>
	<property name="DOCS" value="${ROOT}/docs"/>
	<property name="ETC" value="${ROOT}/etc"/>
	<property name="JAVADOCS" value="${ROOT}/javadocs"/>
	<property name="LIB" value="${ROOT}/lib"/>
	<property name="SRC" value="${ROOT}/src"/>

	<property file="${ROOT}/version.txt"/>
	<property file="${ETC}/ant.properties"/>

	<property name="FULL_NAME" value="Buddi"/>
	<property name="UNIX_NAME" value="buddi"/>
	<property name="DESCRIPTION" value="Buddi (Personal Budget Software)"/>
	<property name="MAIN_CLASS" value="org.homeunix.thecave.buddi.Buddi"/>
	<property name="COPYRIGHT" value="Copyright Wyatt Olson"/>

	<!-- Build the program for all platforms -->
	<target name="all" depends="windows,osx,unix,debian,redhat,source,generic" description="Builds packages for all available platforms."/>

	<target name="windows" depends="jar" description="Builds .exe for Windows, using Launch4J">
		<!-- Define the tasks for Launch4J and AntInstaller -->
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${LAUNCH4J_PATH}/launch4j.jar:${LAUNCH4J_PATH}/lib/xstream.jar" />
		
		<!-- Make the base .exe -->
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${BUILD}/${FULL_NAME}.jar" 
				outfile="${BUILD}/${FULL_NAME}.exe" 
				errTitle="${FULL_NAME}"
				chdir="."
				stayAlive="true"
				icon="${ROOT}/img/win/${UNIX_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="Wyatt Olson"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${FULL_NAME}"
			    	companyName="Wyatt Olson"
			    	internalName="${FULL_NAME}"
			    	originalFilename="${FULL_NAME}.exe"/>
			</config>
		</launch4j>

		<mkdir dir="${BUILD}/${FULL_NAME}"/>
		<move file="${BUILD}/${FULL_NAME}.exe" tofile="${BUILD}/${FULL_NAME}/${FULL_NAME}.exe"/>
		<copy todir="${BUILD}/${FULL_NAME}">
			<fileset dir="${ROOT}/img/win">
				<exclude name="${UNIX_NAME}.ico"/>
				<include name="*.ico"/>
			</fileset>
			<fileset dir="${ROOT}/docs">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>		

		<mkdir dir="${BUILD}"/>
		<zip destfile="${BUILD}/package.zip">
			<zipfileset dir="${BUILD}/${FULL_NAME}"/>
		</zip>
		
		<!-- Make installer -->
		<copy file="${ETC}/windows/moss-installer.jar" tofile="${BUILD}/installer.jar"/>
		<jar destfile="${BUILD}/installer.jar" update="true">
			<zipfileset file="${BUILD}/package.zip" prefix="install"/>
			<zipfileset file="${ETC}/windows/MossInstaller.properties"/>
			<zipfileset file="${ETC}/windows/postinstall.js"/>			
			<zipfileset dir="${ROOT}/img">
				<include name="BuddiAboutLogo.png"/>
				<include name="BuddiFrameIcon.gif"/>
			</zipfileset>
		</jar>
		
		<echo>${ROOT}/img/win/${UNIX_NAME}.ico</echo>
		
		<launch4j>
			<config 
				dontWrapJar="false" 
				jar="${BUILD}/installer.jar" 
				outfile="${BUILD}/${FULL_NAME}-${VERSION}.exe" 
				errTitle="${FULL_NAME}"
				chdir="."
				stayAlive="true"
				icon="${ROOT}/img/win/${UNIX_NAME}.ico">
				<jre
					minVersion="1.5.0"
					initialHeapSize="2"
					maxHeapSize="128"/>

				<versionInfo
			    	fileVersion="${VERSION}"
					fileDescription="${DESCRIPTION}"
			    	txtFileVersion="${VERSION}"
				    copyright="Wyatt Olson"
				    productVersion="${VERSION}"
			    	txtProductVersion="${VERSION}"
			    	productName="${FULL_NAME}"
			    	companyName="Wyatt Olson"
			    	internalName="${FULL_NAME}"
			    	originalFilename="${FULL_NAME}-${VERSION}.exe"/>
			</config>
		</launch4j>

		<delete dir="${BUILD}/${FULL_NAME}"/>
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}">
				<include name="installer.jar"/>
				<include name="package.zip"/>
				<include name="${FULL_NAME}"/>
			</fileset>
		</delete>
	</target>

	<target name="osx" depends="jar" description="Builds an OSX package, using JarBundler.  If on a Mac, will also wrap this in a .dmg; otherwise, will wrap in .zip">
		<!-- Define the JarBundler path -->
		<taskdef name="jarbundler" classpath="${JARBUNDLER_JAR}" classname="net.sourceforge.jarbundler.JarBundler"/>

		<mkdir dir="${BUILD}/${FULL_NAME}"/>
		<jarbundler dir="${BUILD}/${FULL_NAME}" verbose="true" showPlist="false"
	        name="${FULL_NAME}"
	        shortname="${FULL_NAME}"
	        signature="????"
	        stubfile="${ETC}/osx/JavaApplicationStub"
	        mainclass="${MAIN_CLASS}"
	        icon="${ROOT}/img/osx/${FULL_NAME}.icns"
	        jvmversion="1.5+"
	        version="${VERSION}"
	        infostring="${FULL_NAME}, ${PROJECT_COPYRIGHT}"
	        bundleid="${MAIN_CLASS}">

			<jarfileset file="${BUILD}/${FULL_NAME}.jar" />
			<jarfileset dir="${LIB}">
				<include name="*quaqua*"/>
			</jarfileset>

			<!-- Associate document types with this application -->
			<documenttype name="Buddi Data"
				extensions="buddi3"
				iconFile="${ROOT}/img/osx/BuddiData.icns"
				role="Editor"/>
				                
			<documenttype name="Buddi Plugin"
				extensions="buddi3plugin" 
				iconFile="${ROOT}/img/osx/BuddiPlugin.icns"
				role="Editor"/>
			
			<documenttype name="Buddi Translation"
				extensions="lang" 
				iconFile="${ROOT}/img/osx/BuddiLanguage.icns"
				role="Editor"/>

		</jarbundler>

		<!-- Copy documentation -->
		<copy todir="${BUILD}/${FULL_NAME}">
			<fileset dir="${DOCS}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>
		
		<exec executable="/usr/bin/hdiutil" os="Mac OS X">
			<arg line="create -format UDZO -srcfolder '${BUILD}/${FULL_NAME}' -o '${BUILD}/${FULL_NAME}-${VERSION}.dmg'"/>
		</exec>

		<condition property="OS_IS_MAC">
			<os name="Mac OS X"/>
		</condition>

		<property name="BUILD_OSX_PACKAGE" value="true"/>

		<ant target="osx_zip"/>

		<delete dir="${BUILD}/${FULL_NAME}"/>

	</target>

	<target name="osx_zip"  
			if="BUILD_OSX_PACKAGE"
			unless="OS_IS_MAC"
			description="Bundles the Macintosh .app package ina .zip, in case you are not building from a Mac.">
		<zip destfile="${BUILD}/${FULL_NAME}-OSX-${VERSION}.zip">
			<fileset dir="${BUILD}/${FULL_NAME}"/>
		</zip>
	</target>

	<!-- The Unix task will tar the .jar along with a launcher.  The user is responsible for putting
		 this in the correct location, and modifying the launcher as needed. -->
	<target name="unix" depends="jar" description="Creates a generic Unix package, with a command line capable launcher.">
		
		<copy todir="${BUILD}">
			<fileset dir="${ETC}/unix/usr/bin"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="unix"/>
			</filterset>
		</copy>
		
		<tar destfile="${BUILD}/${FULL_NAME}.tar" >
			<tarfileset dir="${BUILD}" mode="755" prefix="${FULL_NAME}">
				<include name="${UNIX_NAME}"/>
			</tarfileset>
			<tarfileset dir="${BUILD}" prefix="${FULL_NAME}">
				<include name="${FULL_NAME}.jar"/>
			</tarfileset>

			<!-- Copy documentation -->
			<tarfileset dir="${ETC}/unix" prefix="${FULL_NAME}">
				<include name="Readme.unix"/>
			</tarfileset>
			<tarfileset dir="${DOCS}" prefix="${FULL_NAME}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${BUILD}/${FULL_NAME}-${VERSION}.tgz" src="${BUILD}/${FULL_NAME}.tar"/>
		<delete>
			<fileset dir="${BUILD}">
				<include name="${FULL_NAME}.tar"/>
				<include name="${UNIX_NAME}"/>
			</fileset>
		</delete>
	</target>


	<!-- The Debian task. -->
	<target name="debian" depends="jar" description="Creates a Debian .deb file, with entries for FreeDesktop desktops.">
		<taskdef name="deb" classpath="${JDEB_JAR}" classname="org.vafer.jdeb.ant.DebAntTask"/>

		<mkdir dir="${BUILD}/deb/data"/>
		
		<!-- Copy all supporting files, for free desktop, scripts, etc -->
		<copy todir="${BUILD}/deb/data/usr">
			<fileset dir="${ETC}/unix/usr"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="platform" value="debian"/>
			</filterset>
		</copy>
		
		<!-- Copy documentation -->
		<mkdir dir="${BUILD}/deb/data/usr/share/doc"/>
		<copy todir="${BUILD}/deb/data/usr/share/doc">
			<fileset dir="${DOCS}">
				<include name="*.txt"/>
				<include name="*.rtf"/>
				<include name="Licenses/*"/>
			</fileset>
		</copy>	

		<!-- Copy fat jar file -->
		<copy file="${BUILD}/${FULL_NAME}.jar" todir="${BUILD}/deb/data/usr/bin"/>

		<!-- Create Debian control files -->
		<mkdir dir="${BUILD}/deb/control"/>
		<copy todir="${BUILD}/deb/control">
			<fileset dir="${ETC}/unix/linux/debian/control"/>
			<filterset begintoken="[[" endtoken="]]">
				<filter token="version" value="${VERSION}"/>
			</filterset>
		</copy>

		<!-- Create the .deb file -->
		<deb destfile="${BUILD}/${FULL_NAME}-${VERSION}.deb" control="${BUILD}/deb/control">
			<data src="${BUILD}/deb/data">
				<exclude name="**/.svn"/>
			</data>
		</deb>

		<delete includeemptydirs="true" dir="${BUILD}/deb"/>
	</target>

	<target name="redhat" depends="jar">

	</target>

	<target name="source" depends="clean" description="Exports the source and tars the bundle.  Requires the SVN Ant path to be set up in the ant.properties file.">
		<!-- Define the JarBundler path -->
		<path id="SVNANT_CLASSPATH">
			<fileset dir="${SVNANT_PATH}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		<taskdef name="svn" classpathref="SVNANT_CLASSPATH" classname="org.tigris.subversion.svnant.SvnTask"/>

		<svn>
			<export srcPath="${ROOT}" destPath="${BUILD}/src"/>
		</svn>

		<tar destfile="${BUILD}/${FULL_NAME}.src.tar">
			<tarfileset dir="${BUILD}/src">
				<include name="**/*"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${BUILD}/${FULL_NAME}-${VERSION}.src.tgz" src="${BUILD}/${FULL_NAME}.src.tar"/>
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}">
				<include name="${FULL_NAME}.src.tar"/>
			</fileset>
			<fileset dir="${BUILD}/src"/>
		</delete>
	</target>

	<target name="generic" depends="jar" description="Renames the fat jar to the release name (including version number)">
		<move file="${BUILD}/${FULL_NAME}.jar" tofile="${BUILD}/${FULL_NAME}-${VERSION}.jar"/>
	</target>

	<target name="javadocs" depends="clean" description="Creates the javadocs">
		<mkdir dir="${JAVADOCS}"/>
		<javadoc destdir="${JAVADOCS}" packagenames="org">
			<packageset dir="${SRC}">
				<include name="**/*"/>
			</packageset>
			<!-- Include Moss in Javadocs.  Change this location or remove it as needed. -->
			<packageset dir="${ROOT}/../Moss/src">
				<include name="**/*"/>
			</packageset>
		</javadoc>
	</target>

	<target name="release" depends="scp_javadocs,ftp" description="Uploads the project, javadocs, etc to correct servers.  Only the project admin should use this.">
		<svn>
			<copy srcUrl="https://buddi.svn.sourceforge.net/svnroot/buddi/trunk" destUrl="https://buddi.svn.sourceforge.net/svnroot/buddi/tags/${VERSION}" message="Tagging release ${VERSION}"/>
		</svn>				
	</target>

	<target name="scp_javadocs" depends="javadocs" description="Uploads Javadocs to web server, using SCP.  Uses SSHExec and SCP tasks, and thus requires jsch to be in the Ant classpath.">
		<tar destfile="${JAVADOCS}/javadocs.tar">
			<tarfileset dir="${JAVADOCS}">
			    <exclude name="javadocs.tar"/>
			</tarfileset>
		</tar>
		<gzip zipfile="${JAVADOCS}/javadocs.tgz" src="${JAVADOCS}/javadocs.tar"/>

		<!-- Remove existing javadocs on server -->
		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="rm -rf ${WEB_ROOT}/javadocs/*"/>

		<!-- Upload new javadocs -->
		<scp todir="${WEB_USER}@${WEB_HOST}:${WEB_ROOT}/javadocs"
			file="${JAVADOCS}/javadocs.tgz"
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"/>
		<sshexec 
			keyfile="${SSH_KEY}"
			passphrase="${SSH_KEY_PASSPHRASE}"
			host="${WEB_HOST}" 
			username="${WEB_USER}" 
			command="tar -C ${WEB_ROOT}/javadocs -zxvf ${WEB_ROOT}/javadocs/javadocs.tgz"/>
	</target>
	
	<target name="ftp" depends="all" description="Uploads all the build files to an FTP account">
		<ftp server="${FTP_HOST}" 
				userid="${FTP_USER}"
				password="${FTP_PASSWORD}" 
				remotedir="${FTP_DIRECTORY}"
				action="put">
			<fileset dir="${BUILD}"/>
		</ftp>		
	</target>

	<target name="jar" depends="clean,compile" description="Creatse a single 'fat' jar, containing all jars in the lib directory.">		
		<mkdir dir="${BUILD}/tmp"/>
		<unzip dest="${BUILD}/tmp">
			<fileset dir="${LIB}">
				<include name="*.jar"/>
				<exclude name="quaqua*"/>			
			</fileset>
		</unzip>
		
		<jar destfile="${BUILD}/${FULL_NAME}.jar">
			<manifest>
				<attribute name="Main-Class" value="${MAIN_CLASS}"/>
			</manifest>
			<fileset dir="${BIN}" includes="**/*"/>
			<fileset dir="${BUILD}/tmp" includes="**/*"/>
			<fileset dir="${ETC}">
				<include name="Languages/*"/>
			</fileset>
			<fileset dir="${ROOT}">
				<include name="version.txt"/>
				<include name="img/BuddiSplashScreen.jpg"/>				
				<include name="img/BuddiAboutLogo.png"/>
				<include name="img/BuddiFrameIcon.gif"/>
				<include name="docs/**.rtf"/>
				<include name="docs/**.txt"/>
				<include name="docs/Licenses/**"/>
			</fileset>
		</jar>
		
		<delete includeemptydirs="true">
			<fileset dir="${BUILD}/tmp"/>
		</delete>
	</target>

	<target name="compile" description="Builds the project">
		<javac srcdir="src" destdir="bin">
			<classpath>
				<fileset dir="${LIB}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="clean" description="Removes all files from bin, build, and javadocs directories">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${BIN}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${BUILD}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${FULL_NAME}/javadocs">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>
</project>
